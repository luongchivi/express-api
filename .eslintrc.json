{
  "env": {
    "es2020": true,
    "node": true,
    "browser": false,
    "jest": true
  },
  "parserOptions": {
    "ecmaVersion": 2020
  },
  "globals": {
    "require": true,
    "exports": true,
    "module": true
  },
  "extends": ["prettier", "airbnb-base"],
  "plugins": ["prettier"],
  "rules": {
    "linebreak-style": "off",
    "quotes": ["error", "single", { "avoidEscape": true }],
    "arrow-parens": ["error", "as-needed"],
    "class-methods-use-this": "off",
    "curly": ["error", "all"],
    "func-names": ["warn", "as-needed"],
    "global-require": "off",
    "import/newline-after-import": ["error", { "count": 2 }],
    "max-len": [
      "error",
      150,
      2,
      {
        "ignoreUrls": true,
        "ignoreComments": false,
        "ignoreRegExpLiterals": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true
      }
    ],
    "no-await-in-loop": "off",
    "no-console": "off",
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 2,
        "maxBOF": 0,
        "maxEOF": 0
      }
    ],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "no-underscore-dangle": "off",
    "no-unused-expressions": [
      "error",
      {
        "allowShortCircuit": true
      }
    ],
    "no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "object-curly-newline": [
      "error",
      {
        "ObjectExpression": {
          "minProperties": 6,
          "multiline": true,
          "consistent": true
        },
        "ObjectPattern": {
          "minProperties": 6,
          "multiline": true,
          "consistent": true
        }
      }
    ],
    "operator-linebreak": [
      "error",
      "before",
      {
        "overrides": {
          "=": "none",
          "?": "after",
          ":": "after"
        }
      }
    ],
    "prefer-destructuring": [
      "error",
      {
        "VariableDeclarator": { "array": false, "object": true },
        "AssignmentExpression": { "array": false, "object": false }
      },
      {
        "enforceForRenamedProperties": false
      }
    ]
  }
}
